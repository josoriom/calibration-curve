var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GaussianGenerator_spare, _GaussianGenerator_hasSpare, _GaussianGenerator_mean, _GaussianGenerator_standardDeviation, _GaussianGenerator_generator;
import XSAdd from 'ml-xsadd';
/**
 * Create a random array of numbers of a specific length.
 *
 * @return - array of random floats normally distributed
 */
export function createRandomArray(options = {}) {
    const { mean = 0, standardDeviation = 1, length = 1000, range = 1, seed, distribution = 'normal', } = options;
    const generator = new XSAdd(seed);
    const returnArray = new Float64Array(length);
    switch (distribution) {
        case 'normal': {
            const gaussianGenerator = new GaussianGenerator(mean, standardDeviation, generator);
            for (let i = 0; i < length; i++) {
                returnArray[i] = gaussianGenerator.generateGaussian();
            }
            break;
        }
        case 'uniform': {
            for (let i = 0; i < length; i++) {
                returnArray[i] = (generator.random() - 0.5) * range + mean;
            }
            break;
        }
        default: {
            throw new Error(`unknown distribution: ${String(distribution)}`);
        }
    }
    return returnArray;
}
class GaussianGenerator {
    constructor(mean, standardDeviation, generator) {
        _GaussianGenerator_spare.set(this, 0);
        _GaussianGenerator_hasSpare.set(this, false);
        _GaussianGenerator_mean.set(this, void 0);
        _GaussianGenerator_standardDeviation.set(this, void 0);
        _GaussianGenerator_generator.set(this, void 0);
        __classPrivateFieldSet(this, _GaussianGenerator_mean, mean, "f");
        __classPrivateFieldSet(this, _GaussianGenerator_standardDeviation, standardDeviation, "f");
        __classPrivateFieldSet(this, _GaussianGenerator_generator, generator, "f");
    }
    generateGaussian() {
        let val, u, v, s;
        if (__classPrivateFieldGet(this, _GaussianGenerator_hasSpare, "f")) {
            __classPrivateFieldSet(this, _GaussianGenerator_hasSpare, false, "f");
            val = __classPrivateFieldGet(this, _GaussianGenerator_spare, "f") * __classPrivateFieldGet(this, _GaussianGenerator_standardDeviation, "f") + __classPrivateFieldGet(this, _GaussianGenerator_mean, "f");
        }
        else {
            do {
                u = __classPrivateFieldGet(this, _GaussianGenerator_generator, "f").random() * 2 - 1;
                v = __classPrivateFieldGet(this, _GaussianGenerator_generator, "f").random() * 2 - 1;
                s = u * u + v * v;
            } while (s >= 1 || s === 0);
            s = Math.sqrt((-2 * Math.log(s)) / s);
            __classPrivateFieldSet(this, _GaussianGenerator_spare, v * s, "f");
            __classPrivateFieldSet(this, _GaussianGenerator_hasSpare, true, "f");
            val = __classPrivateFieldGet(this, _GaussianGenerator_mean, "f") + __classPrivateFieldGet(this, _GaussianGenerator_standardDeviation, "f") * u * s;
        }
        return val;
    }
}
_GaussianGenerator_spare = new WeakMap(), _GaussianGenerator_hasSpare = new WeakMap(), _GaussianGenerator_mean = new WeakMap(), _GaussianGenerator_standardDeviation = new WeakMap(), _GaussianGenerator_generator = new WeakMap();
//# sourceMappingURL=createRandomArray.js.map